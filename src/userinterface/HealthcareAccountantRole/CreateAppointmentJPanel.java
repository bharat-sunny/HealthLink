/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HealthcareAccountantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthCenterEnterprise;
import Business.Enterprise.InsuranceCompanyEnterprise;
import Business.Insurance.Insurance;
import Business.InsuranceCustomer.InsuranceCustomer;
import Business.Map.MapViewer;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabAssistantOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientVisitWorkRequest;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.github.sarxos.webcam.WebcamUtils;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import userinterface.DoctorRole.DoctorWorkAreaJPanel;

/**
 *
 * @author Shesh Narayan
 */
public class CreateAppointmentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private EcoSystem ecosystem;
    private String patientId;
    private Patient cus;

    /**
     * Creates new form CreateAppointmentJPanel
     */
    CreateAppointmentJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, EcoSystem ecoSystem, String patientId) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecosystem = ecoSystem;
        this.patientId = patientId;
        btnUpdate.setEnabled(false);
        populateField();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        txtPatientId11 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPatientSSN = new javax.swing.JTextField();
        btnFindPatient = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        txtHomePhone = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        radioBtnMale = new javax.swing.JRadioButton();
        radioBtnFemale = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        radioBtnPatientInsuranceYes = new javax.swing.JRadioButton();
        radioBtnPatientInsuranceNo = new javax.swing.JRadioButton();
        lblHavePolicy = new javax.swing.JLabel();
        lblPolicyName = new javax.swing.JLabel();
        lblInsCompany = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        txtReasonForVisit = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblPolicyNum = new javax.swing.JLabel();
        txtPolicyNum = new javax.swing.JTextField();
        btnFindInsurance = new javax.swing.JButton();
        txtInsuranceCompany = new javax.swing.JTextField();
        txtPolicyName = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        lblCoverage = new javax.swing.JLabel();
        txtCoverage = new javax.swing.JTextField();
        radioBtnOther = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtPatientIdentifier = new javax.swing.JTextField();
        btnResetPolicyNum = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JPasswordField();
        jLabel11 = new javax.swing.JLabel();
        rePasswordJTextField = new javax.swing.JPasswordField();
        btnUpdate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        personImageLabels = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        jLabel14.setText("Middle Name :");

        setBackground(new java.awt.Color(77, 154, 115));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CREATE APPOINTMENT");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 20, -1, 28));

        btnBack.setBackground(new java.awt.Color(255, 204, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 33, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Already registered? Provide SSN: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 67, -1, -1));
        add(txtPatientSSN, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 71, 138, -1));

        btnFindPatient.setBackground(new java.awt.Color(255, 204, 0));
        btnFindPatient.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFindPatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/find.png"))); // NOI18N
        btnFindPatient.setText("Find Patient");
        btnFindPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPatientActionPerformed(evt);
            }
        });
        add(btnFindPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(471, 67, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(634, 73, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("PATIENT INFORMATION");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(514, 128, 305, -1));
        add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 169, 140, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("First Name :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 171, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Address:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(253, 237, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Last Name :");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 171, -1, -1));
        add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(575, 169, 146, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("SSN :");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(534, 209, -1, -1));
        add(txtSSN, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 207, 145, -1));

        txtHomePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHomePhoneActionPerformed(evt);
            }
        });
        add(txtHomePhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 207, 140, -1));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Phone Number:");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 209, -1, -1));

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });
        add(txtAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 537, 56, -1));

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Age :");
        add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 539, -1, -1));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Sex :");
        add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(804, 173, -1, -1));

        buttonGroup2.add(radioBtnMale);
        radioBtnMale.setForeground(new java.awt.Color(255, 255, 255));
        radioBtnMale.setText("M");
        radioBtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnMaleActionPerformed(evt);
            }
        });
        add(radioBtnMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(871, 170, -1, -1));

        buttonGroup2.add(radioBtnFemale);
        radioBtnFemale.setForeground(new java.awt.Color(255, 255, 255));
        radioBtnFemale.setText("F");
        radioBtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnFemaleActionPerformed(evt);
            }
        });
        add(radioBtnFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 170, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("INSURANCE INFORMATION");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 310, -1, -1));

        buttonGroup1.add(radioBtnPatientInsuranceYes);
        radioBtnPatientInsuranceYes.setForeground(new java.awt.Color(255, 255, 255));
        radioBtnPatientInsuranceYes.setText("Yes");
        radioBtnPatientInsuranceYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnPatientInsuranceYesActionPerformed(evt);
            }
        });
        add(radioBtnPatientInsuranceYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 360, -1, -1));

        buttonGroup1.add(radioBtnPatientInsuranceNo);
        radioBtnPatientInsuranceNo.setForeground(new java.awt.Color(255, 255, 255));
        radioBtnPatientInsuranceNo.setText("No");
        radioBtnPatientInsuranceNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnPatientInsuranceNoActionPerformed(evt);
            }
        });
        add(radioBtnPatientInsuranceNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 360, -1, -1));

        lblHavePolicy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblHavePolicy.setForeground(new java.awt.Color(255, 255, 255));
        lblHavePolicy.setText("Is this patient covered by Insurance");
        add(lblHavePolicy, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 360, -1, -1));

        lblPolicyName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPolicyName.setForeground(new java.awt.Color(255, 255, 255));
        lblPolicyName.setText("Policy Name :");
        add(lblPolicyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 440, -1, -1));

        lblInsCompany.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInsCompany.setForeground(new java.awt.Color(255, 255, 255));
        lblInsCompany.setText("Insurance Company :");
        add(lblInsCompany, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 440, -1, -1));

        btnCreate.setBackground(new java.awt.Color(255, 204, 0));
        btnCreate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/yes.png"))); // NOI18N
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 600, 133, 55));

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("Reason for Visit:");
        add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 470, -1, -1));
        add(txtReasonForVisit, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 470, 269, -1));

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 237, 405, 65));

        lblPolicyNum.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPolicyNum.setForeground(new java.awt.Color(255, 255, 255));
        lblPolicyNum.setText("Provide Insurance Policy Number:");
        add(lblPolicyNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 410, -1, -1));

        txtPolicyNum.setEnabled(false);
        add(txtPolicyNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, 139, -1));

        btnFindInsurance.setBackground(new java.awt.Color(255, 204, 0));
        btnFindInsurance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/find_1.png"))); // NOI18N
        btnFindInsurance.setText("Find Policy");
        btnFindInsurance.setEnabled(false);
        btnFindInsurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindInsuranceActionPerformed(evt);
            }
        });
        add(btnFindInsurance, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 400, -1, -1));
        add(txtInsuranceCompany, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 137, -1));
        add(txtPolicyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 440, 147, -1));
        add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(677, 71, 134, -1));

        lblCoverage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCoverage.setForeground(new java.awt.Color(255, 255, 255));
        lblCoverage.setText("Patient Insurance Coverage % :");
        add(lblCoverage, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 470, -1, -1));
        add(txtCoverage, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 470, 137, -1));

        buttonGroup2.add(radioBtnOther);
        radioBtnOther.setForeground(new java.awt.Color(255, 255, 255));
        radioBtnOther.setText("Other");
        add(radioBtnOther, new org.netbeans.lib.awtextra.AbsoluteConstraints(904, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Patient ID / Visit ID :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 104, -1, -1));

        txtPatientIdentifier.setEditable(false);
        add(txtPatientIdentifier, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 102, 138, -1));

        btnResetPolicyNum.setBackground(new java.awt.Color(255, 204, 0));
        btnResetPolicyNum.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnResetPolicyNum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/reset.png"))); // NOI18N
        btnResetPolicyNum.setText("Reset Policy Number");
        btnResetPolicyNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPolicyNumActionPerformed(evt);
            }
        });
        add(btnResetPolicyNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 400, -1, -1));

        jButton1.setBackground(new java.awt.Color(255, 204, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/map.png"))); // NOI18N
        jButton1.setText("View On Map");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(739, 255, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Email:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 210, -1, -1));
        add(emailTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 200, 200, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Username:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 540, -1, -1));

        nameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJTextFieldActionPerformed(evt);
            }
        });
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, 130, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Password:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 540, -1, -1));
        add(passwordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 540, 123, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("re-Enter Password:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 540, -1, -1));
        add(rePasswordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 540, 123, -1));

        btnUpdate.setBackground(new java.awt.Color(255, 204, 0));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/prescription.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 600, 133, 55));

        jButton2.setBackground(new java.awt.Color(255, 204, 0));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/camera.png"))); // NOI18N
        jButton2.setText("Take Picture");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, -1, -1));
        add(personImageLabels, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 180, 160));

        jButton3.setBackground(new java.awt.Color(255, 204, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/yes.png"))); // NOI18N
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 320, 100, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtHomePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHomePhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHomePhoneActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void radioBtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnMaleActionPerformed

    private void radioBtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnFemaleActionPerformed

    private void radioBtnPatientInsuranceYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnPatientInsuranceYesActionPerformed
        lblPolicyNum.setEnabled(true);
        btnFindInsurance.setEnabled(true);
        txtPolicyNum.setEnabled(true);

    }//GEN-LAST:event_radioBtnPatientInsuranceYesActionPerformed

    private void radioBtnPatientInsuranceNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnPatientInsuranceNoActionPerformed

        lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);

        txtCoverage.setEnabled(false);

        lblCoverage.setEnabled(false);
        lblInsCompany.setEnabled(false);

        lblPolicyName.setEnabled(false);
    }//GEN-LAST:event_radioBtnPatientInsuranceNoActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed

        btnUpdate.setEnabled(false);
        if (txtFirstName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide first name");
            return;
        }
        if (txtLastName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide last name");
            return;
        }
        if (buttonGroup2.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please select gender");
            return;
        }
        if (txtHomePhone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide phone");
            return;
        }
        if (txtSSN.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide SSN");
            return;
        }
        if (txtAge.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide age");
            return;
        }
        if (txtAddress.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide address");
            return;
        }
        if (emailTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide email id");
            return;
        }

        if (buttonGroup1.isSelected(null)) {
            JOptionPane.showMessageDialog(null, "Please choose if Patient covered by Insurance");
            return;
        }

        if (txtReasonForVisit.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide Reason for visit");
            return;

        } else {

            String registrationDate = txtDate.getText().trim();
            String userName = nameJTextField.getText();
            String password = String.valueOf(passwordJTextField.getPassword());
            String rePassword = String.valueOf(rePasswordJTextField.getPassword());
            String firstName = txtFirstName.getText().trim();
            String lastName = txtLastName.getText().trim();
            String gender = "Male";
            if (radioBtnFemale.isSelected()) {
                gender = "Female";
            } else if (radioBtnOther.isSelected()) {
                gender = "Other";
            }

            String phoneNo = txtHomePhone.getText().trim();

            if (!phonePatternCorrect()) {
                JOptionPane.showMessageDialog(null, "/* Following are valid phone number examples */             \n"
                        + "              \"1234567890\", \"123-456-7890\", \"(123)4567890\", \"(123)456-7890\",\n"
                        + "              /* Following are invalid phone numbers */ \n"
                        + "              \"(1234567890)\",\"123)4567890\", \"12345678901\", \"(1)234567890\",");
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }

            if (phonePatternCorrect()) {
                txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }
            
            if (!emailPatternCheck()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid email Id");
                emailTextField.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }
            
            String email = emailTextField.getText().trim();

            if (emailPatternCheck()) {
                emailTextField.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }

            String ssn = txtSSN.getText().trim();

            if (!ssnPatternCheck()) {
                JOptionPane.showMessageDialog(null, "/* United States Social Security numbers are nine-digit numbers in the format AAA-GG-SSSS with following rules. */             \n"
                        + "              \"The first three digits called the area number. The area number cannot be 000, 666, or between 900 and 999\",\n"
                        + "                \" Digits four and five are called the group number and range from 01 to 99\",\n"
                        + "              \"The last four digits are serial numbers from 0001 to 9999.\"");
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.RED));

                return;
            }

            if (ssnPatternCheck()) {
                txtSSN.setBorder(BorderFactory.createLineBorder(Color.GRAY));

            }

            String age = txtAge.getText().trim();

            try {
                Integer.parseInt(age);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please provide integer values in Age textfield");
                return;
            }

            String address = txtAddress.getText().trim();
            boolean hasInsurance = false;

            String policyNumber = txtPolicyNum.getText().trim();
            if (radioBtnPatientInsuranceYes.isSelected()) {
                if (policyNumber.equals("")) {
                    JOptionPane.showMessageDialog(null, "Provide policy number");
                    return;
                }

                if (txtPolicyName.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "No Policy found, please provide correct policy number");
                    return;
                }
            }
            String insuranceCompany = String.valueOf(txtInsuranceCompany.getText());
            String policyName = String.valueOf(txtPolicyName.getText());
            String coverString = txtCoverage.getText().trim();
            double coverage = coverString.equals("") ? 0 : Double.parseDouble(txtCoverage.getText().trim());

            String reasonForVisit = txtReasonForVisit.getText().trim();

            if (hasInsurance) {
                if (txtPolicyNum.getText().equals("")) {
                    return;
                }
            }

            Insurance insurance = new Insurance(policyName, insuranceCompany, coverage);
            InsuranceCustomer insuranceCustomer = new InsuranceCustomer(insurance, policyNumber);
            PatientVisitWorkRequest patientTreatmentWorkRequest;
            HealthCenterEnterprise healthCenterEnterprise = (HealthCenterEnterprise) enterprise;
            if(cus==null)
            {
            Patient patient = new Patient();
            
            patient.setAppointmentDate(txtDate.getText());
            patient.setPatientId(txtPatientIdentifier.getText().trim());
            patient.setPatientFirstName(firstName);
            patient.setPatientLastName(lastName);
            patient.setSex(gender);

            patient.setPhoneNumber(phoneNo);
            patient.setAge(age);
            patient.setSsn(ssn);
            patient.setAddress(address);
            patient.setEmail(email);

            patient.setInsuranceCustomer(insuranceCustomer);

            healthCenterEnterprise.getPatientDirectory().getPatients().add(patient);
            //creating user account
            //if(cus==null)
            //{
            if (userName == null || userName.equals("")) {
            nameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Username cannot be empty");
            return;
        }

        if (password == null || password.equals("")) {
            nameJTextField.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Password cannot be empty");
            return;
        }

        if (!passwordPatternCorrect()) {
            JOptionPane.showMessageDialog(null, "Password should be at least 6 Characters "
                    + "digits and a combination of number , uppercase letter, "
                    + "lowercase letter and Special characters are not allowed other than $, +, _");
            passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        
        if (!password.equals(rePassword)) {
            JOptionPane.showMessageDialog(null, "Passwords don't match");
            passwordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            rePasswordJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        } else {
            
            List<UserAccount> userAccountList = ecosystem.getUserAccountDirectory().getUserAccountList();
            for (UserAccount userAccount : userAccountList) {
                if (userAccount.getUsername().equals(userName)) {
                    JOptionPane.showMessageDialog(null, "username already taken!!");
                    nameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
                    return;
                }
            }
        }
            UserAccount userAccount = ecosystem.getUserAccountDirectory().createUserAccount(userName, password, patient, new PatientRole());
            patient.setUserAccount(userAccount);
            patientTreatmentWorkRequest = new PatientVisitWorkRequest(registrationDate, reasonForVisit, patient);
        }   //create user ends 
            else{
                patientTreatmentWorkRequest = new PatientVisitWorkRequest(registrationDate, reasonForVisit, cus);
            }
            patientTreatmentWorkRequest.setStatus("Waiting for Doctor");            
            //   patientTreatmentWorkRequest.setSender(userAccount);

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
                if (organization instanceof DoctorOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequests().add(patientTreatmentWorkRequest);
                userAccount.getWorkQueue().getWorkRequests().add(patientTreatmentWorkRequest);
                refresh();
                JOptionPane.showMessageDialog(null, "Patient Registered Successfully");
                passwordJTextField.setText("");
                rePasswordJTextField.setText("");
                nameJTextField.setText("");

                personImageLabels.setIcon(null);

                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
            }

        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AccountantWorkAreaJPanel dwjp = (AccountantWorkAreaJPanel) component;
        dwjp.populateAllPatientsTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPatientActionPerformed

        //btnCreate.setEnabled(false);
        btnUpdate.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        boolean isPatientFound = false;
        String ssn = txtPatientSSN.getText().trim();
        List<Network> networks = ecosystem.getNetworks();
        List<HealthCenterEnterprise> healthCenterEnterprises = new ArrayList<>();

        for (Network network : networks) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HealthCenterEnterprise) {
                    healthCenterEnterprises.add((HealthCenterEnterprise) enterprise);
                }
            }
        }

        for (HealthCenterEnterprise healthCenterEnterprise : healthCenterEnterprises) {
            List<Patient> patients = healthCenterEnterprise.getPatientDirectory().getPatients();
            for (Patient patient : patients) {
                if (patient.getSsn().equals(ssn)) {
                    cus = patient;
                    autopopulateFields(patient);
                    isPatientFound = true;
                }

            }
        }

        if (!isPatientFound) {
            JOptionPane.showMessageDialog(null, "No patient Found");
        }
    }//GEN-LAST:event_btnFindPatientActionPerformed

    private void btnFindInsuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindInsuranceActionPerformed
        String insurancePolicyNumber = txtPolicyNum.getText().trim();
        String ssn = txtSSN.getText().trim();
        List<InsuranceCompanyEnterprise> insuranceEnterprises = new ArrayList<>();
        InsuranceCustomer matchedCustomer = null;

        List<Network> networks = ecosystem.getNetworks();
        for (Network network : networks) {
            for (Enterprise enterp : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterp instanceof InsuranceCompanyEnterprise) {
                    insuranceEnterprises.add((InsuranceCompanyEnterprise) enterp);
                }
            }
        }

        for (InsuranceCompanyEnterprise insuranceCompanyEnterprise : insuranceEnterprises) {
            List<InsuranceCustomer> insuranceCustomers = insuranceCompanyEnterprise.getInsuranceCustomerDirectory().getInsuranceCustomers();
            for (InsuranceCustomer insuranceCustomer : insuranceCustomers) {
                if (insurancePolicyNumber.equals(insuranceCustomer.getInsurancePolicyNumber()) && ssn.equals(insuranceCustomer.getSsn())) {
                    matchedCustomer = insuranceCustomer;

                }
            }
        }

        if (matchedCustomer != null) {
            txtInsuranceCompany.setText(matchedCustomer.getInsurance().getInsuranceCompany());
            txtPolicyName.setText(matchedCustomer.getInsurance().getPolicyName());
            //  txtPolicyNo.setText(matchedCustomer.getInsurancePolicyNumber());
            txtCoverage.setText(String.valueOf(matchedCustomer.getInsurance().getCoverage()));
            txtPolicyNum.setEnabled(false);
            txtSSN.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Policy number does not match with provided SSN");
            txtInsuranceCompany.setText("");
            txtPolicyName.setText("");
            txtCoverage.setText("");
            txtPolicyNum.setText("");
            return;
        }
    }//GEN-LAST:event_btnFindInsuranceActionPerformed

    private void btnResetPolicyNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPolicyNumActionPerformed
        txtPolicyNum.setEnabled(true);
        txtSSN.setEnabled(true);
        txtPolicyNum.setText("");
        txtPolicyName.setText("");
        txtInsuranceCompany.setText("");
        txtCoverage.setText("");

    }//GEN-LAST:event_btnResetPolicyNumActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         if (txtAddress.getText().trim().isEmpty()){
          JOptionPane.showMessageDialog(null, "Enter address first");  
        }else{
        SwingUtilities.invokeLater(new Runnable() {
 
            @Override
            public void run() {
                MapViewer browser = new MapViewer();
                browser.setVisible(true);
                browser.loadURL("https://www.google.com/maps/search/?api=1&query="+txtAddress.getText().trim());
            }
        });
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameJTextFieldActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        nameJTextField.setEnabled(false);
        passwordJTextField.setEnabled(false);
        rePasswordJTextField.setEnabled(false);
        txtSSN.setEnabled(false);
        txtPatientSSN.setEnabled(false);
        txtPatientIdentifier.setEnabled(false);
        btnCreate.setEnabled(false);
        if(cus==null){
            JOptionPane.showMessageDialog(null, "Cannot update customer");
        }
        else{
            if (txtFirstName.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide first name");
                return;
            }
            if (txtLastName.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide last name");
                return;
            }
            if (buttonGroup2.isSelected(null)) {
                JOptionPane.showMessageDialog(null, "Please select gender");
                return;
            }
            if (txtHomePhone.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide phone");
                return;
            }
            if (txtSSN.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide SSN");
                return;
            }
            if (txtAge.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide age");
                return;
            }
            if (txtAddress.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide address");
                return;
            }

            if (emailTextField.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please provide email");
                return;
            }

            else {

                String registrationDate = txtDate.getText().trim();

                String firstName = txtFirstName.getText().trim();
                String lastName = txtLastName.getText().trim();
                String email = emailTextField.getText().trim();
                String gender = "Male";
                if (radioBtnFemale.isSelected()) {
                    gender = "Female";
                } else if (radioBtnOther.isSelected()) {
                    gender = "Other";
                }

                String phoneNo = txtHomePhone.getText().trim();

                if (!phonePatternCorrect()) {
                    JOptionPane.showMessageDialog(null, "/* Following are valid phone number examples */             \n"
                        + "              \"1234567890\", \"123-456-7890\", \"(123)4567890\", \"(123)456-7890\",\n"
                        + "              /* Following are invalid phone numbers */ \n"
                        + "              \"(1234567890)\",\"123)4567890\", \"12345678901\", \"(1)234567890\",");
                    txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.RED));

                    return;
                }

                if (phonePatternCorrect()) {
                    txtHomePhone.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                }

                if (!emailPatternCheck()) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid email Id");
                    emailTextField.setBorder(BorderFactory.createLineBorder(Color.RED));

                    return;
                }

                if (emailPatternCheck()) {
                    emailTextField.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                }

                String age = txtAge.getText().trim();

                try {
                    Integer.parseInt(age);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please provide integer values in Age textfield");
                    return;
                }

                String address = txtAddress.getText().trim();

                cus.setAppointmentDate(txtDate.getText());
                cus.setPatientFirstName(firstName);
                cus.setPatientLastName(lastName);
                cus.setSex(gender);
                cus.setPhoneNumber(phoneNo);
                cus.setAge(age);
                cus.setAddress(address);
                cus.setEmail(email);
                btnUpdate.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Customer Information Updated Successfully!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
//        String Path ;
//            JFileChooser jFileChooser = new JFileChooser();
//            jFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
//            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "png");
//            jFileChooser.addChoosableFileFilter(filter);
//            int result = jFileChooser.showSaveDialog(null);
//            if (result == JFileChooser.APPROVE_OPTION)
//            {
//            File selectedFile = jFileChooser.getSelectedFile();
//            Path = selectedFile.getAbsolutePath();
//            
//            
//            ImageIcon icon = new ImageIcon(Path);
//            Image img = icon.getImage();
//            Image imagescaled = img.getScaledInstance(210,213,Image.SCALE_SMOOTH);
//            ImageIcon scaledIcon = new ImageIcon(imagescaled);
//            personImageLabel.setIcon(scaledIcon);
//            JOptionPane.showMessageDialog(null, "Upload");
//            }
            
            
            JButton btnGo = new JButton("Capture");
            String filepath = "/userinterface/";
            try{
            Webcam webcam = Webcam.getDefault();
            webcam.setViewSize(WebcamResolution.VGA.getSize());



            WebcamPanel panel = new WebcamPanel(webcam);
            panel.setFPSDisplayed(true);
            panel.setDisplayDebugInfo(true);
            panel.setImageSizeDisplayed(true);
            panel.setMirrored(true);



            JFrame window = new JFrame ("Camera capture ");
            window.add(panel);
            window.add(btnGo, BorderLayout.SOUTH);
            btnGo.addActionListener(new ActionListener() 
            {

                public void actionPerformed(ActionEvent e) 
                {

    //                Properties pro = getProperties();
    //                filePath = pro.getProperty("RobotWorkPlace")+"CamPic/Pic";
    //                filePath = getClass().getResource()

                    WebcamUtils.capture(webcam, txtPatientIdentifier.getText()+".jpg");
                    //BufferedImage image = webcam.getImage();
                    JOptionPane.showMessageDialog(null,"Image taken");
                    webcam.close();

                }
            }
            );
            window.setResizable(true);
    //        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            window.pack();
            window.setLocationRelativeTo(null);
            window.setVisible(true);
            }
            catch(Exception e)
            {
            JOptionPane.showMessageDialog(null,"Error writing file");
            return;
            }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        
//            String Path ;
//            Path = txtFirstName.getText()+txtLastName.getText();
//            System.out.println(Path);
//            Path = String.valueOf(getClass().getResource("/" + ));
//            System.out.priPathntln("Next");
//            System.out.println(Path);
            


            String Path;
            Path = txtPatientIdentifier.getText()+".jpg";
            ImageIcon icon = new ImageIcon(Path);
            Image img = icon.getImage();
            Image imagescaled = img.getScaledInstance(180,160,Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(imagescaled);
            personImageLabels.setIcon(scaledIcon);
//          personImageLabels.setIcon(new javax.swing.ImageIcon((txtFirstName.getText()+txtLastName.getText()+".jpg" )));

            
              //txtFirstName.getText()+txtLastName.getText();
//            JFileChooser jFileChooser = new JFileChooser();
//            jFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
//            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "png");
//            jFileChooser.addChoosableFileFilter(filter);
//            int result = jFileChooser.showSaveDialog(null);
//            if (result == JFileChooser.APPROVE_OPTION)
//            {
//            File selectedFile = jFileChooser.getSelectedFile();
//            Path = selectedFile.getAbsolutePath();
//            System.out.print(Path);
           
//            personImageLabels.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/" + txtFirstName.getText()+txtLastName.getText()+ ".jpg")));

//            personImageLabels.setIcon(new javax.swing.ImageIcon(("bharattankalaaaa.jpg")));

//            ImageIcon icon = new ImageIcon(Path);
//            Image img = icon.getImage();
//            Image imagescaled = img.getScaledInstance(210,213,Image.SCALE_SMOOTH);
//            ImageIcon scaledIcon = new ImageIcon(imagescaled);
//            personImageLabels.setIcon(scaledIcon);


//            JOptionPane.showMessageDialog(null, "Image Saved");




//            }


        
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFindInsurance;
    private javax.swing.JButton btnFindPatient;
    private javax.swing.JButton btnResetPolicyNum;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCoverage;
    private javax.swing.JLabel lblHavePolicy;
    private javax.swing.JLabel lblInsCompany;
    private javax.swing.JLabel lblPolicyName;
    private javax.swing.JLabel lblPolicyNum;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JPasswordField passwordJTextField;
    private javax.swing.JLabel personImageLabels;
    private javax.swing.JRadioButton radioBtnFemale;
    private javax.swing.JRadioButton radioBtnMale;
    private javax.swing.JRadioButton radioBtnOther;
    private javax.swing.JRadioButton radioBtnPatientInsuranceNo;
    private javax.swing.JRadioButton radioBtnPatientInsuranceYes;
    private javax.swing.JPasswordField rePasswordJTextField;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCoverage;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHomePhone;
    private javax.swing.JTextField txtInsuranceCompany;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPatientId11;
    private javax.swing.JTextField txtPatientIdentifier;
    private javax.swing.JTextField txtPatientSSN;
    private javax.swing.JTextField txtPolicyName;
    private javax.swing.JTextField txtPolicyNum;
    private javax.swing.JTextField txtReasonForVisit;
    private javax.swing.JTextField txtSSN;
    // End of variables declaration//GEN-END:variables

    private void populateField() {
        LocalDateTime localTimeUpdate = LocalDateTime.now();
        DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss");
        txtDate.setText(localTimeUpdate.format(dateTimeFormat));

        txtPatientIdentifier.setText(patientId);

        //lblPolicyNum.setEnabled(false);
        btnFindInsurance.setEnabled(false);
        txtPolicyNum.setEnabled(false);
        txtInsuranceCompany.setEnabled(false);
        txtPolicyName.setEnabled(false);

        txtCoverage.setEnabled(false);

        //lblCoverage.setEnabled(false);
        //lblInsCompany.setEnabled(false);

        //lblPolicyName.setEnabled(false);
    }

    private void refresh() {

        txtPatientIdentifier.setText(UUID.randomUUID().toString().substring(0, 7));
        txtFirstName.setText("");
        txtLastName.setText("");
        txtHomePhone.setText("");
        txtAge.setText("");
        txtSSN.setText("");
        txtAddress.setText("");
        txtReasonForVisit.setText("");
        emailTextField.setText("");
        txtPolicyName.setText("");
        txtPolicyNum.setText("");
        txtCoverage.setText("");
        txtInsuranceCompany.setText("");
    }

    private boolean phonePatternCorrect() {

        Pattern pattern = Pattern.compile("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}");
        Matcher matcher = pattern.matcher(txtHomePhone.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }

    private boolean ssnPatternCheck() {

        Pattern pattern = Pattern.compile("^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$");
        Matcher matcher = pattern.matcher(txtSSN.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }
    private boolean emailPatternCheck() {

        Pattern pattern = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(emailTextField.getText());

        boolean b = false;

        if (matcher.matches()) {
            b = true;
        } else {
            b = false;
        }

        return b;
    }
      private boolean passwordPatternCorrect() {
        Pattern p = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[$+_])(?=\\S+$).{6,}$");
        Matcher m = p.matcher(String.valueOf(passwordJTextField.getPassword()));
        boolean b = m.matches();
        return b;
    }

    private void autopopulateFields(Patient patient) {
        txtFirstName.setText(patient.getPatientFirstName());
        txtLastName.setText(patient.getPatientLastName());
        txtPatientIdentifier.setText(patient.getPatientId());
        txtHomePhone.setText(patient.getPhoneNumber());
        txtSSN.setText(patient.getSsn());
        txtAge.setText(patient.getAge());
        txtAddress.setText(patient.getAddress());
        emailTextField.setText(patient.getEmail());
        try{
        nameJTextField.setText(patient.getUserAccount().getUsername());
        passwordJTextField.setText(patient.getUserAccount().getPassword());
        rePasswordJTextField.setText(patient.getUserAccount().getPassword());
        }catch(Exception exc){
            nameJTextField.setEnabled(false);
            passwordJTextField.setEnabled(false);
            rePasswordJTextField.setEnabled(false);
        }
        
//        Addded by Bharat
        String Path;
        Path = txtPatientIdentifier.getText()+".jpg";
        ImageIcon icon = new ImageIcon(Path);
        Image img = icon.getImage();
        Image imagescaled = img.getScaledInstance(180,160,Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imagescaled);
        personImageLabels.setIcon(scaledIcon);
//        
        String sex = patient.getSex();
        
        if(sex.equals("Male"))
        {
            radioBtnMale.setSelected(true);
        }
        
        else if(sex.equals("Female"))
        {
            radioBtnFemale.setSelected(true);
        }
        
        else if(sex.equals("Other"))
        {
            radioBtnOther.setSelected(true);
        }
        nameJTextField.setEnabled(false);
        passwordJTextField.setEnabled(false);
        rePasswordJTextField.setEnabled(false);
        txtSSN.setEnabled(false);
        txtPatientSSN.setEnabled(false);
        txtPatientIdentifier.setEnabled(false);

    }
}
