/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HealthcareAccountantRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthCenterEnterprise;
import Business.Network.Network;
import Business.Organization.AccountantOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AccountantBillingRequest;
import Business.WorkQueue.PatientVisitWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import userinterface.DoctorRole.RequestLabTestJPanel;

/**
 *
 * @author Shesh Narayan
 */
public class AccountantWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private AccountantOrganization accountantOrganization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    List<Patient> underTreatmentPatients = new ArrayList<>();
    List<Patient> treatedPatients = new ArrayList<>();

    /**
     * Creates new form AccountantWorkAreaJPanel
     */
    public AccountantWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, AccountantOrganization accountantOrganization, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.accountantOrganization = accountantOrganization;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.ecoSystem = ecosystem;

        populateAllPatientsTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCreateAppointment = new javax.swing.JButton();
        btnProcessMedicalBillings = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllPatients = new javax.swing.JTable();
        btnReport = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(77, 154, 115));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Appointment Details");

        btnCreateAppointment.setBackground(new java.awt.Color(255, 204, 51));
        btnCreateAppointment.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCreateAppointment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/prescription.png"))); // NOI18N
        btnCreateAppointment.setText("Create Appointment");
        btnCreateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAppointmentActionPerformed(evt);
            }
        });

        btnProcessMedicalBillings.setBackground(new java.awt.Color(255, 204, 51));
        btnProcessMedicalBillings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnProcessMedicalBillings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/bill.png"))); // NOI18N
        btnProcessMedicalBillings.setText("Process Medical Billings");
        btnProcessMedicalBillings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessMedicalBillingsActionPerformed(evt);
            }
        });

        tblAllPatients.setBackground(new java.awt.Color(204, 255, 153));
        tblAllPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Patient Name", "Phone Number", "Address", "Treatment Status", "Appointment Date", "Bill Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAllPatients);

        btnReport.setBackground(new java.awt.Color(255, 204, 51));
        btnReport.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/chart.png"))); // NOI18N
        btnReport.setText("Show Appointment Status Report");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Accountant Work Area");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(btnReport, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnProcessMedicalBillings, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(229, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(260, 260, 260)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(420, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcessMedicalBillings, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReport, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(560, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAppointmentActionPerformed

        String patientId = UUID.randomUUID().toString().substring(0, 7);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("CreateAppointmentJPanel", new CreateAppointmentJPanel(userProcessContainer, userAccount, enterprise, ecoSystem, patientId));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnCreateAppointmentActionPerformed

    private void btnProcessMedicalBillingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessMedicalBillingsActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ProcessMedicalBillingsJPanel", new ProcessMedicalBillingsJPanel(userProcessContainer, userAccount, enterprise, accountantOrganization, ecoSystem));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnProcessMedicalBillingsActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        /*List<Patient> underTreatmentPatients = new ArrayList<>();
        List<Patient> treatedPatients = new ArrayList<>();
        
        List<Patient> patients = ((HealthCenterEnterprise) enterprise).getPatientDirectory().getPatients();
        for (Patient patient : patients) {
            if (patient.isIsTreatmentComplete()) {
                treatedPatients.add(patient);
            } else {
                underTreatmentPatients.add(patient);
            }
        }*/
        DefaultPieDataset defaultPieDataset = new DefaultPieDataset();
        defaultPieDataset.setValue("In Progress", underTreatmentPatients.size());
        defaultPieDataset.setValue("Completed Successfully", treatedPatients.size());
        JFreeChart chart = ChartFactory.createPieChart("Appointment Status Pie Chart", defaultPieDataset, true, true, true);
        PiePlot piePlot =(PiePlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Appointment Status Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(500,500);
    }//GEN-LAST:event_btnReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateAppointment;
    private javax.swing.JButton btnProcessMedicalBillings;
    private javax.swing.JButton btnReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAllPatients;
    // End of variables declaration//GEN-END:variables

    public void populateAllPatientsTable() {
        List<Patient> patients = ((HealthCenterEnterprise) enterprise).getPatientDirectory().getPatients();
        DefaultTableModel dtm = (DefaultTableModel) tblAllPatients.getModel();
        dtm.setRowCount(0);
        /*for (Patient patient : patients) {
            Object[] row = new Object[6];

            row[0] = patient;
            row[1] = patient.getPatientFirstName() + " " + patient.getPatientLastName();
            row[2] = patient.getPhoneNumber();
            row[3] = patient.getAddress();
            row[4] = patient.isIsTreatmentComplete() ? "Treatment Complete" : "Treatment In Progress";
            row[5] = patient.getAppointmentDate();

            dtm.addRow(row);
        }
        for (WorkRequest request : accountantOrganization.getWorkQueue().getWorkRequests()) {
            Object[] row = new Object[7];
            String status = request.getStatus();
            row[0] = ((AccountantBillingRequest) request).getPatient().getPatientId();
            row[1] = ((AccountantBillingRequest) request).getPatient().getPatientFirstName() + " " + ((AccountantBillingRequest) request).getPatient().getPatientLastName();
            row[2] = ((AccountantBillingRequest) request).getPatient().getPhoneNumber();
            row[3] = ((AccountantBillingRequest) request).getPatient().getAddress();
            row[4] = status.equals("Patient Transaction Completed")? "Treatment Complete" : "Treatment In Progress";
            row[5] = ((AccountantBillingRequest) request).getPatient().getAppointmentDate();
            row[6] = ((AccountantBillingRequest) request).getBillingAmount();

            dtm.addRow(row);
        }*/
        //for(Network net:ecoSystem.getNetworks()){
            //for(Enterprise enter: net.getEnterpriseDirectory().getEnterpriseList()){
                //if ((enter instanceof HealthCenterEnterprise)&&(net.getZip()==enterprise.getZipcode()))
                //{
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizations()) 
                    {
                        if (org instanceof DoctorOrganization) 
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                                //if(((PatientVisitWorkRequest) request).getPatient().getPatientId()==userAccount.getCus().getPatientId())
                                //{
                                    String status = request.getStatus();
                                    Object[] row = new Object[7];
                                    row[0] = ((PatientVisitWorkRequest) request).getPatient().getPatientId();
                                    row[1] = ((PatientVisitWorkRequest) request).getPatient().getPatientFirstName();
                                    row[2] = ((PatientVisitWorkRequest) request).getPatient().getPhoneNumber();
                                    row[3] = ((PatientVisitWorkRequest) request).getPatient().getAddress();
                                    row[5] = ((PatientVisitWorkRequest) request).getPatient().getAppointmentDate();
                                    row[4] = ((PatientVisitWorkRequest) request).getIsComplete()? "Treatment Complete" : "Treatment In Progress";
                                    row[6] = ((PatientVisitWorkRequest) request).getBillAmount();
                                    dtm.addRow(row);
                                    if(((PatientVisitWorkRequest) request).getIsComplete())
                                    {
                                      treatedPatients.add(((PatientVisitWorkRequest) request).getPatient());
                                    } else {
                                        underTreatmentPatients.add(((PatientVisitWorkRequest) request).getPatient());
                                    }
                                //}
                            }
                        }
                    //}
                    
                //}
            //}
            
        }
    }
}
