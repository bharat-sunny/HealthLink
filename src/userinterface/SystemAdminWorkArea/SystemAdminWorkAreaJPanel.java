/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.AccountantOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.HealthOfficerOrganization;
import Business.Organization.InsAgentOrganization;
import Business.Organization.ManagerOrganization;
import Business.Organization.Organization;
import Business.WorkQueue.AccountantBillingRequest;
import Business.WorkQueue.GovernmentFundRequest;
import Business.WorkQueue.InsuranceWorkRequest;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.PatientVisitWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Shesh Narayan
 */
public class SystemAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminWorkAreaJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    public SystemAdminWorkAreaJPanel(JPanel userProcessContainer,EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ecosystem=ecosystem;
        populateTree();
    }
    
    public void populateTree(){
        DefaultTreeModel model=(DefaultTreeModel)jTree.getModel();
        ArrayList<Network> networkList=ecosystem.getNetworks();
        ArrayList<Enterprise> enterpriseList;
        ArrayList<Organization> organizationList;
        
        Network network;
        Enterprise enterprise;
        Organization organization;
        
        DefaultMutableTreeNode networks=new DefaultMutableTreeNode("Networks");
        DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();
        root.removeAllChildren();
        root.insert(networks, 0);
        
        DefaultMutableTreeNode networkNode;
        DefaultMutableTreeNode enterpriseNode;
        DefaultMutableTreeNode organizationNode;
        
        for(int i=0;i<networkList.size();i++){
            network=networkList.get(i);
            networkNode=new DefaultMutableTreeNode(network.getName());
            networks.insert(networkNode, i);
            
            enterpriseList=network.getEnterpriseDirectory().getEnterpriseList();
            for(int j=0; j<enterpriseList.size();j++){
                enterprise=enterpriseList.get(j);
                enterpriseNode=new DefaultMutableTreeNode(enterprise.getName());
                networkNode.insert(enterpriseNode, j);
                
                organizationList=enterprise.getOrganizationDirectory().getOrganizations();
                for(int k=0;k<organizationList.size();k++){
                    organization=organizationList.get(k);
                    organizationNode=new DefaultMutableTreeNode(organization.getName());
                    enterpriseNode.insert(organizationNode, k);
                }
            }
        }
        model.reload();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblSelectedNode = new javax.swing.JLabel();
        btnManageNetwork = new javax.swing.JButton();
        btnManageEnterprise = new javax.swing.JButton();
        btnManageAdmin = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnManageAdmin1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jTree.setBackground(new java.awt.Color(0, 255, 204));
        jTree.setForeground(new java.awt.Color(255, 255, 255));
        jTree.setMaximumSize(new java.awt.Dimension(130, 64));
        jTree.setPreferredSize(new java.awt.Dimension(130, 64));
        jTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
        );

        jSplitPane.setLeftComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(77, 154, 115));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Selected Node:");

        lblSelectedNode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSelectedNode.setForeground(new java.awt.Color(255, 255, 255));
        lblSelectedNode.setText("<View_selected_node>");

        btnManageNetwork.setBackground(new java.awt.Color(255, 204, 0));
        btnManageNetwork.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnManageNetwork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/net.png"))); // NOI18N
        btnManageNetwork.setText("Manage Network");
        btnManageNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageNetworkActionPerformed(evt);
            }
        });

        btnManageEnterprise.setBackground(new java.awt.Color(255, 204, 0));
        btnManageEnterprise.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnManageEnterprise.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/enterprise.png"))); // NOI18N
        btnManageEnterprise.setText("Manage Enterprise");
        btnManageEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageEnterpriseActionPerformed(evt);
            }
        });

        btnManageAdmin.setBackground(new java.awt.Color(255, 204, 0));
        btnManageAdmin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnManageAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/admin_net.png"))); // NOI18N
        btnManageAdmin.setText("Manage Enterprise Admin");
        btnManageAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageAdminActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("System Admin Work Area");

        btnManageAdmin1.setBackground(new java.awt.Color(255, 204, 0));
        btnManageAdmin1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnManageAdmin1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/IconsImages/report.png"))); // NOI18N
        btnManageAdmin1.setText("View System Reports");
        btnManageAdmin1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageAdmin1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(lblSelectedNode))
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnManageAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnManageNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnManageEnterprise, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                            .addComponent(btnManageAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblSelectedNode))
                .addGap(50, 50, 50)
                .addComponent(btnManageNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnManageEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnManageAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnManageAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jSplitPane.setRightComponent(jPanel2);

        add(jSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnManageNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageNetworkActionPerformed
        ManageNetworkJPanel manageNetworkJPanel=new ManageNetworkJPanel(userProcessContainer, ecosystem);
        userProcessContainer.add("manageNetworkJPanel",manageNetworkJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageNetworkActionPerformed

    private void btnManageEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageEnterpriseActionPerformed
        ManageEnterprisesJPanel manageEnterpriseJPanel=new ManageEnterprisesJPanel(userProcessContainer, ecosystem);
        userProcessContainer.add("manageEnterpriseJPanel",manageEnterpriseJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageEnterpriseActionPerformed

    private void btnManageAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageAdminActionPerformed
        ManageEnterpriseAdminsJPanel manageEnterpriseAdminJPanel=new ManageEnterpriseAdminsJPanel(userProcessContainer, ecosystem);
        userProcessContainer.add("manageEnterpriseAdminJPanel",manageEnterpriseAdminJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnManageAdminActionPerformed

    private void jTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeValueChanged
        
        DefaultMutableTreeNode selectedNode= (DefaultMutableTreeNode)jTree.getLastSelectedPathComponent();
        if(selectedNode!=null){
            lblSelectedNode.setText(selectedNode.toString());
        }
    }//GEN-LAST:event_jTreeValueChanged

    private void btnManageAdmin1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageAdmin1ActionPerformed
        // TODO add your handling code here:
        
        showGraph();
    }//GEN-LAST:event_btnManageAdmin1ActionPerformed

    public void showGraph(){
        int counttreat=0, countprogress=0,billcomplete=0,billprogress=0,labcomplete=0,labprogress=0,inscomplete=0,
                insprogress=0,fundscomplete=0,fundsprogress=0,ordercomplete=0,orderprogress=0;
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for(Network net:ecosystem.getNetworks()){
            for(Enterprise enter: net.getEnterpriseDirectory().getEnterpriseList()){
                
                    for (Organization org : enter.getOrganizationDirectory().getOrganizations()) 
                    {
                        //Patient visits
                        if (org instanceof DoctorOrganization) 
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                              if(((PatientVisitWorkRequest) request).getIsComplete())
                              {
                                 counttreat++; 
                              }
                              else
                              {
                                  countprogress++;
                              }
                              //Lab tests
                              /*if((((PatientVisitWorkRequest) request).getLabResult().isEmpty()))
                              {
                                 labprogress++; 
                              }
                              else
                              {
                                  labcomplete++;
                              }*/
                            }
                        }
                        //Billing requests
                        if (org instanceof AccountantOrganization)
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                              if(((AccountantBillingRequest) request).getStatus().equals("Patient Transaction Completed"))
                              {
                                 billcomplete++; 
                              }
                              else
                              {
                                 billprogress++;
                              }
                            }
                        }
                        // Insurance claims
                        if (org instanceof InsAgentOrganization)
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                              if(((InsuranceWorkRequest) request).getStatus().equals("Insurance Claim Approved"))
                              {
                                 inscomplete++; 
                              }
                              else
                              {
                                 insprogress++;
                              }
                            }
                        }
                        //Funds requests
                        if (org instanceof HealthOfficerOrganization)
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                              if(((GovernmentFundRequest) request).getStatus().equals("Accepted"))
                              {
                                 fundscomplete++; 
                              }
                              else
                              {
                                 fundsprogress++;
                              }
                            }
                        }
                        //Order requests
                        if (org instanceof ManagerOrganization)
                        {
                            for (WorkRequest request : org.getWorkQueue().getWorkRequests()) 
                            {
                              if(((OrderWorkRequest) request).getStatus().equals("Accepted"))
                              {
                                 ordercomplete++; 
                              }
                              else
                              {
                                 orderprogress++;
                              }
                            }
                        }
                    }
                }
           dataset.addValue( counttreat , net.getName() , "Visit_Completed" );
           dataset.addValue( countprogress , net.getName() , "VIsit_Not_Completed" );
           dataset.addValue( billcomplete , net.getName() , "Billing_Completed" );
           dataset.addValue( billprogress , net.getName() , "Billing_Not_Completed" );
           dataset.addValue( inscomplete , net.getName() , "Claim_Completed" );
           dataset.addValue( insprogress , net.getName() , "Claim_Not_Completed" );
           dataset.addValue( fundscomplete , net.getName() , "Funds_Completed" );
           dataset.addValue( fundsprogress , net.getName() , "Funds_Not_Completed" );
           dataset.addValue( ordercomplete , net.getName() , "Orders_Completed" );
           dataset.addValue( orderprogress , net.getName() , "Orders_Not_Completed" );
           //dataset.addValue( labcomplete , net.getName() , "Lab_Completed" );
           //dataset.addValue( labprogress , net.getName() , "Lab_In_progress" );
           counttreat=0;
           countprogress=0;
           billcomplete=0;
           billprogress=0;
           inscomplete=0;
           insprogress=0;
           fundscomplete=0;
           fundsprogress=0;
           ordercomplete=0;
           orderprogress=0;
           //labcomplete=0;
           //labprogress=0;
        }
        
        final JFreeChart chart = ChartFactory.createBarChart(
            "Overall Ecosystem Status",         // chart title
            "WorkQueues",               // domain axis label
            "Value",                  // range axis label
            dataset,                  // data
            PlotOrientation.HORIZONTAL,
            true,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );
        // set the range axis to display integers only...
        final CategoryPlot plot = chart.getCategoryPlot();
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        //plot chart
        ChartFrame frame = new ChartFrame("HealthLink Status ", chart);
        
        frame.setVisible(true);
        frame.setSize(1000,700);
        //Add mouse function
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManageAdmin;
    private javax.swing.JButton btnManageAdmin1;
    private javax.swing.JButton btnManageEnterprise;
    private javax.swing.JButton btnManageNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JTree jTree;
    private javax.swing.JLabel lblSelectedNode;
    // End of variables declaration//GEN-END:variables
}
